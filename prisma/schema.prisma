generator client {
  provider = "prisma-client-js"
}

/// Commented as it keeps generating TS files at prod
// generator custom_generator {
//   provider = "prisma-generator-fake-data"
//   /// by default, the file will be generated at `./prisma/fake-data.ts`
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// TODO: Remove references to the removed fields
model User {
  id    String @id @default(uuid())
  fname String @db.VarChar(30)
  lname String @db.VarChar(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  type user_type

  login_username String @unique
  login_password String

  approved user_approval_type @default(Pending)

  RefreshTokens     RefreshToken[]
  Schedules         Schedule[]
  Messages          Message[]
  MedicalRecords    MedicalRecord[]
  authoredSchedules Schedule[]       @relation(name: "authoredByUser")
  Notifications     Notifications[]
  Feedback          Feedback?
  GuidanceRecord    GuidanceRecord[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Schedule {
  id       String         @id @default(uuid())
  state    schedule_state @default(Available)
  fromDate DateTime
  toDate   DateTime
  title    String
  desc     String         @default("")
  repeat   repeat         @default(None)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Messages Message[]
  Users    User[]

  authoredBy   User   @relation(name: "authoredByUser", fields: [authorUserId], references: [id], onDelete: Cascade)
  authorUserId String

  exists Boolean @default(true)
}

model Message {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  content    String   @db.Text
  scheduleId String?
  userId     String?

  Schedule Schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  User     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduleId], map: "Message_scheduleId_fkey")
}

model Announcement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  content   String   @db.LongText
}

model MedicalRecord {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  content   String   @db.LongText
  userId    String
}

model GuidanceRecord {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  content   String   @db.LongText
  userId    String
}

model Feedback {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  rating       Int      @db.TinyInt
  feedbackText String   @db.Text
  userId       String   @unique
}

model Notifications {
  id        String   @id @default(uuid())
  title     String?
  message   String
  createdAt DateTime @default(now())

  usersToNotify User[]
}

enum user_type {
  Student
  Teacher
  Guidance
  Clinic
  Admin
}

enum user_approval_type {
  Pending
  Unapproved
  Approved
  Archived
}

enum schedule_state {
  Available
  Pending
  Approved
  Ongoing
  Completed
  Declined
  Rescheduled
}

enum repeat {
  None
  Daily
  Weekly
  Monthly
}
